const FindShortfallPositions = require("../lib/FindShortfallPositions");
const AccountsDbClient = require('../lib/AccountsDbClient');
const TestConstants = require('./TestConstants');
const { ABIS, ADDRS, ENDPOINTS } = require('../lib/Constants');
const Poller = require("../lib/Poller");
const Utils = require('../lib/Utils');
const Runner = require("../lib/Runner");
const AuctionBidPricer = require("../lib/AuctionBidPricer");

const { BigNumber } = require('ethers');
const { ethers } = require('hardhat');
const { fork } = require('child_process');
const Common = require("@ethereumjs/common");
const { FeeMarketEIP1599Transaction, Transaction } = require('@ethereumjs/tx');
const { expect } = require('chai');

// require('dotenv').config({ path: __dirname + "/../.env"});

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

let provider = new ethers.providers.JsonRpcProvider(process.env.PROVIDER_ENDPOINT);
let db = {
        host: process.env.REDIS_HOST,
        port: process.env.REDIS_PORT
    };
let priceFeed = new ethers.Contract(ADDRS.OLD_UNISWAP_ANCHORED_VIEW, ABIS.OLD_UNISWAP_ANCHORED_VIEW, provider)
let comptroller = new ethers.Contract(ADDRS.COMPOUND_COMPTROLLER, ABIS.COMPOUND_COMPTROLLER, provider);
let store = new AccountsDbClient(db, provider, priceFeed, comptroller);

describe("", async function() {
    this.timeout(Number.MAX_SAFE_INTEGER);

    xit("fetches most recent data", async function() {
        let provider = new ethers.providers.JsonRpcProvider(ENDPOINTS.INFURA);
        let priceFeed = new ethers.Contract(ADDRS.UNISWAP_ANCHORED_VIEW, ABIS.UNISWAP_ANCHORED_VIEW, provider)
        let comptroller = new ethers.Contract(ADDRS.COMPOUND_COMPTROLLER, ABIS.COMPOUND_COMPTROLLER, provider);

        let store = new AccountsDbClient({
            host: process.env.REDIS_HOST,
            port: process.env.REDIS_PORT
        }, provider, priceFeed, comptroller);
        // await store.setCompoundAccounts();
        console.log(await store.getSickStoredCompoundAccounts('f'));
    });

    xit("fetches and stores data", async function() {
        await store.setCompoundParams();
        // console.log(await store.getStoredCompoundAccounts());
        console.log(await store.getStoredCompoundParams());
    });

    xit("poller", async function() {
        const poller = new Poller();
        const ipc = require('node-ipc');
        ipc.config.id = 'poller';

        let result = await poller.pollCoinbase();
        let json = JSON.parse(result);
        // console.log(json);

        ipc.serve(() => {
            ipc.server.on('message', (data) => {
                console.log(data);
            })
        })
        ipc.server.start();
        await sleep(3000);
        ipc.connectTo('poller', () => {
            ipc.of.poller.on('connect', () => {
                ipc.of.poller.emit('message', json);
            });
        });
        await sleep(3000);
        ipc.disconnect('poller');
        await sleep(2000);
        ipc.server.stop();
    });

    xit("auction bid pricer", async function() {
        let abp = new AuctionBidPricer();
        abp.v1_getWinningGasPrice(0, 0).then(()=>{});
    });

    xit("Runner lib", async function() {
        // let signerWithProvider = provider.getSigner();
        let signerWithProvider = new ethers.Wallet('0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80', provider);
        let runner = new Runner(
            signerWithProvider, 
            priceFeed,
            store
        );
        await runner.init();

        let data = {
            timestamp: '1624463580',
            messages: [
              '0x00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000060d358dc00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000007ce4403d80000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034254430000000000000000000000000000000000000000000000000000000000',
              '0x00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000060d358dc00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000075a320a80000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034554480000000000000000000000000000000000000000000000000000000000',
              '0x00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000060d358dc00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000027c28300000000000000000000000000000000000000000000000000000000000000067072696365730000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000358545a0000000000000000000000000000000000000000000000000000000000',
              '0x00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000060d358dc00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000f44650000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034441490000000000000000000000000000000000000000000000000000000000',
              '0x00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000060d358a000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000115b5c00000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035245500000000000000000000000000000000000000000000000000000000000',
              '0x00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000060d358dc00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000009a9550000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000035a52580000000000000000000000000000000000000000000000000000000000',
              '0x00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000060d358dc00000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000084a910000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034241540000000000000000000000000000000000000000000000000000000000',
              '0x00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000060d358dc00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000014a8de0000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034b4e430000000000000000000000000000000000000000000000000000000000',
              '0x00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000060d358dc00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000114fda60000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000044c494e4b00000000000000000000000000000000000000000000000000000000',
              '0x00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000060d358dc00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000f2e5658000000000000000000000000000000000000000000000000000000000000000670726963657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004434f4d5000000000000000000000000000000000000000000000000000000000',
              '0x00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000060d358dc00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000010d9930000000000000000000000000000000000000000000000000000000000000000670726963657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003554e490000000000000000000000000000000000000000000000000000000000',
              '0x00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000060d358dc00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000008a8030000000000000000000000000000000000000000000000000000000000000006707269636573000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034752540000000000000000000000000000000000000000000000000000000000',
              '0x00000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000060d358dc00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000066e086000000000000000000000000000000000000000000000000000000000000000670726963657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003534e580000000000000000000000000000000000000000000000000000000000'
            ],
            signatures: [
              '0xeb1b3e0671e5f784b78c052c50f4899efad084f640afb77fa00d5a4b30a9ccd5549643b6bbf28839d6476671a0a8490dd55fe4070ea2ff976a053aa9eb89414a000000000000000000000000000000000000000000000000000000000000001c',
              '0xa666b76108fded24d057f3be09f12d965def6d931a1688d85a9f71963d31652540b1cdf44c2358649fb7f5a0e7fd3190ffdbaa726ddf9a651170040eed2bc250000000000000000000000000000000000000000000000000000000000000001c',
              '0x0bfeb8280a56fc079bf272da945eb8244da607f0e3c9e3cbcafb6fe20a6eff3973d3670bf5bb688b6089ec4ec6b725b4ff42b96075b77932a02b1487156c567b000000000000000000000000000000000000000000000000000000000000001c',
              '0x87c397a8f774b7a53f7bc212579163e80bfcfa44b43f1b3bc4b1ee0ac396bff17109da104ab8a2c30d18fbd7c56cbcd0e3dfae9190e210409c603ecf0f394806000000000000000000000000000000000000000000000000000000000000001c',
              '0x856dee2b7554d562e8b9f9a8be9d22607a33b7fe9f14511ebb19b8e28a07a7da7e8e8fdea70ee93689c6b8800f697ab8f8165e13b1e4196ea86923dbf7994574000000000000000000000000000000000000000000000000000000000000001c',
              '0xacb0f61c1fd6e14b1d3628e502538469d5ca1b659a0d4452078f0a3617fa962592a0341d0a127be712e7b2a8155f0e11ea9968aa676909b893dccb623262f27f000000000000000000000000000000000000000000000000000000000000001c',
              '0x309dffe8bb161d21a622b3ad41154be25f3484dfebcd065048dae9d21da77434130130f7b878e6f386475bf92c993798abd5bd20d7639d934efa5f8ba69c8787000000000000000000000000000000000000000000000000000000000000001b',
              '0x27cfa80b4763734563264905e87c8968eb85b949ad57375490330c56049bfc382d9599c671e93ea71a786c12da008d41c939f632e8706b371c2263b3dd78c3c9000000000000000000000000000000000000000000000000000000000000001b',
              '0x7b21768b94f41f5485d7e26ff9ecd5fa6d59271dc6d486add6256d14984bb93a7fb83aaa0a3b722ec2e8f0dff60952293ef1b8bc5604c59cfc95deae2d614f21000000000000000000000000000000000000000000000000000000000000001b',
              '0xdb8404649f59c03ab121427f2e85549cb2379020f0d7061eb80b1cd159c3f72966a6a898edf3a06b0dc25698b805b02419722b5c183f8b26b3ae694e62278e5d000000000000000000000000000000000000000000000000000000000000001b',
              '0xfe06579d8ab1fb3c0f52f1f5d1cd6a5902cb0ed67555e3b970051a773d38f023cb633dbc0da7d286ebbd374af038d3e0f81d2a3e6a93a5328ea98c52eb95fc16000000000000000000000000000000000000000000000000000000000000001b',
              '0x03cc3301a38417cab2602e2b60af857c01049f13538d7c7faa3e36d538c967bf897f4fd0818d238338e41a3d5d0e7e82efbb0b15c02a2f8ece6a8ef01700cb23000000000000000000000000000000000000000000000000000000000000001c',
              '0xd2f5e5142606d68a6f1ba2ef1fea5e1e4de613bb5eaf643978b2270826b7e50714443ddea438495f60ce279126c465c6cbc59931e438447d0eda72f32e5dccda000000000000000000000000000000000000000000000000000000000000001b'
            ],
            prices: {
              BTC: '33525.33500000001',
              ETH: '1973.625',
              XTZ: '2.6056999999999997',
              DAI: '1.0005495',
              REP: '18.2',
              ZRX: '0.633173',
              BAT: '0.543377',
              KNC: '1.35395',
              LINK: '18.15287',
              COMP: '254.695',
              UNI: '17.6684',
              GRT: '0.5672999999999999',
              SNX: '6.7421500000000005'
            }
        };
        console.log('start timing');
        await runner.processReporterPostWithWorkers(data);
        await sleep(25000); 
    });

    xit("live test of compound", async function() {
        let compound = fork(__dirname + "/../app/compound.js");
        process.on("SIGINT", () => {
            compound.kill();
        })
    });

    // NOTE a similar test is tagged with TEST
    xit("successfully liquidates a majority of positions and makes close to expected profits", async function() {
        store.blockNumber = TestConstants.FORK_2.blockNumber;
        // await store.setCompoundAccounts();
        await store.setCompoundParams();

        let accounts = await store.getSickStoredCompoundAccounts();
        // accounts = accounts.slice(0, 100);
        let params = await store.getStoredCompoundParams();

        // 3 gwei
        let lowTestingGasPrice = BigNumber.from("3000000000");
        let finder = new FindShortfallPositions( 
            accounts, 
            params,
            lowTestingGasPrice,
            provider
        );
        finder.chainId = 1337;
        finder.minProfit = 15;

        let bot = new ethers.Contract(ADDRS['BOT_ON_FORK'], ABIS['BOT'], provider.getSigner());

        let arr = await finder.getLiquidationTxs();
        let countSuccesses = 0;
        let total = arr.length;
        for (let elem of arr) {
            try {
                let response = await bot.liquidate(
                    elem.cTokenBorrowed,
                    elem.tokenBorrowed,
                    elem.cTokenCollateral,
                    elem.tokenCollateral,
                    elem.borrower,
                    elem.repayAmount,
                    elem.maxSeizeTokens,
                    {
                        gasLimit: BigNumber.from(2000000),
                        gasPrice: elem.gasPrice
                    }
                );

                let receipt = await response.wait();
                if(receipt.status === 1) {
                    countSuccesses += 1;
                }
            } catch (e) {
                // console.log(e);
            }
        }
    
        expect(countSuccesses / total * 100).to.be.gte(80);
    });

    xit("reserializes tx data with signature", async function(){
        // NOTE set appropriate forked blocknumber 
        let provider = new ethers.providers.JsonRpcProvider();

        let tx = TestConstants.FORK_3.tx_1;
        let txParams = {
            to: tx.to,
            nonce: "0x"+tx.nonce.toString(16),
            gasLimit: "0x"+tx.gas.toString(16),
            gasPrice: BigNumber.from(tx.gasPrice).toHexString(),
            data: tx.input,
            value: BigNumber.from(tx.value).toHexString(),
            v: tx.v,
            r: tx.r, 
            s: tx.s
        }
        // let common = new Common({ chain: "mainnet", hardfork: "berlin" });
        let unserializedTx = Transaction.fromTxData(txParams);
        let serializedTx = unserializedTx.serialize(); 
        serializedTx = "0x"+serializedTx.toString('hex');
        // NOTE doesnt work because the signature is signed for mainnet and is EIP155
        provider.send("eth_sendRawTransaction", [serializedTx]);

        let txParams2 = {
            to: "0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266",
            nonce: "0x01",
            gasLimit: "0xffff",
            gasPrice: "0xffff",
            value: "0x00"
        } 

        let c = new Common({chain: 1337});
        let unserializedTx2 = Transaction.fromTxData(txParams2, c);
        let pk = Buffer.from("ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80", "hex");
        unserializedTx2 = unserializedTx2.sign(pk);
        let serializedTx2 = unserializedTx2.serialize();
        serializedTx2 = "0x"+serializedTx2.toString("hex");
        provider.send("eth_sendRawTransaction", [serializedTx2]);
    });

    // UPDATE test flashbots on ropsten test 
});
